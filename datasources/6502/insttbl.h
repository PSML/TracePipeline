#ifndef __INSTTBL_H__
#define __INSTTBL_H__
struct InstructionDesc InstTable[] = {
  { INV, "INV", "INVALID INST" }, // synthetic invalid instruction
  { ADC, "ADC", "add with carry" },
  { AND, "AND", "and (with accumulator)" },
  { ASL, "ASL", "arithmetic shift left" },
  { BCC, "BCC", "branch on carry clear" },
  { BCS, "BCS", "branch on carry set" },
  { BEQ, "BEQ", "branch on equal (zero set)" },
  { BIT, "BIT", "bit test" },
  { BMI, "BMI", "branch on minus (negative set)" },
  { BNE, "BNE", "branch on not equal (zero clear)" },
  { BPL, "BPL", "branch on plus (negative clear)" },
  { BRK, "BRK", "interrupt" },
  { BVC, "BVC", "branch on overflow clear" },
  { BVS, "BVS", "branch on overflow set" },
  { CLC, "CLC", "clear carry" },
  { CLD, "CLD", "clear decimal" },
  { CLI, "CLI", "clear interrupt disable" },
  { CLV, "CLV", "clear overflow" },
  { CMP, "CMP", "compare (with accumulator)" },
  { CPX, "CPX", "compare with X" },
  { CPY, "CPY", "compare with Y" },
  { DEC, "DEC", "decrement" },
  { DEX, "DEX", "decrement X" },
  { DEY, "DEY", "decrement Y" },
  { EOR, "EOR", "exclusive or (with accumulator)" },
  { INC, "INC", "increment" },
  { INX, "INX", "increment X" },
  { INY, "INY", "increment Y" },
  { JMP, "JMP", "jump" },
  { JSR, "JSR", "jump subroutine" },
  { LDA, "LDA", "load accumulator" },
  { LDX, "LDX", "load X" },
  { LDY, "LDY", "load Y" },
  { LSR, "LSR", "logical shift right" },
  { NOP, "NOP", "no operation" },
  { ORA, "ORA", "or with accumulator" },
  { PHA, "PHA", "push accumulator" },
  { PHP, "PHP", "push processor status (SR)" },
  { PLA, "PLA", "pull accumulator" },
  { PLP, "PLP", "pull processor status (SR)" },
  { ROL, "ROL", "rotate left" },
  { ROR, "ROR", "rotate right" },
  { RTI, "RTI", "return from interrupt" },
  { RTS, "RTS", "return from subroutine" },
  { SBC, "SBC", "subtract with carry" },
  { SEC, "SEC", "set carry" },
  { SED, "SED", "set decimal" },
  { SEI, "SEI", "set interrupt disable" },
  { STA, "STA", "store accumulator" },
  { STX, "STX", "store X" },
  { STY, "STY", "store Y" },
  { TAX, "TAX", "transfer accumulator to X" },
  { TAY, "TAY", "transfer accumulator to Y" },
  { TSX, "TSX", "transfer stack pointer to X" },
  { TXA, "TXA", "transfer X to accumulator" },
  { TXS, "TXS", "transfer X to stack pointer" },
  { TYA, "TYA", "transfer Y to accumulator" }
};

#endif 
