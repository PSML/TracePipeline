ca65 V2.14.0
Main file   : p2.s
Current file: p2.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.14.0
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.14.0"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_cprintf
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               L000D:
000000r 1  25 6C 64 00  	.byte	$25,$6C,$64,$00
000004r 1               
000004r 1               ; ---------------------------------------------------------------
000004r 1               ; int __near__ main (void)
000004r 1               ; ---------------------------------------------------------------
000004r 1               
000004r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     decsp8
000003r 1  A0 04        	ldy     #$04
000005r 1  A9 00        	lda     #$00
000007r 1  91 rr        	sta     (sp),y
000009r 1  C8           	iny
00000Ar 1  91 rr        	sta     (sp),y
00000Cr 1  C8           	iny
00000Dr 1  91 rr        	sta     (sp),y
00000Fr 1  C8           	iny
000010r 1  91 rr        	sta     (sp),y
000012r 1  A0 07        L0002:	ldy     #$07
000014r 1  20 rr rr     	jsr     ldeaxysp
000017r 1  20 rr rr     	jsr     pusheax
00001Ar 1  A2 00        	ldx     #$00
00001Cr 1  86 rr        	stx     sreg
00001Er 1  86 rr        	stx     sreg+1
000020r 1  A9 03        	lda     #$03
000022r 1  20 rr rr     	jsr     toslteax
000025r 1  F0 39        	beq     L0003
000027r 1  A0 07        	ldy     #$07
000029r 1  20 rr rr     	jsr     ldeaxysp
00002Cr 1  20 rr rr     	jsr     steax0sp
00002Fr 1  A9 rr        	lda     #<(L000D)
000031r 1  A2 rr        	ldx     #>(L000D)
000033r 1  20 rr rr     	jsr     pushax
000036r 1  A0 05        	ldy     #$05
000038r 1  20 rr rr     	jsr     ldeaxysp
00003Br 1  A0 0A        	ldy     #$0A
00003Dr 1  20 rr rr     	jsr     inceaxy
000040r 1  20 rr rr     	jsr     pusheax
000043r 1  A0 06        	ldy     #$06
000045r 1  20 rr rr     	jsr     _cprintf
000048r 1  A0 07        	ldy     #$07
00004Ar 1  20 rr rr     	jsr     ldeaxysp
00004Dr 1  20 rr rr     	jsr     saveeax
000050r 1  A0 01        	ldy     #$01
000052r 1  20 rr rr     	jsr     inceaxy
000055r 1  A0 04        	ldy     #$04
000057r 1  20 rr rr     	jsr     steaxysp
00005Ar 1  20 rr rr     	jsr     resteax
00005Dr 1  4C rr rr     	jmp     L0002
000060r 1  A2 00        L0003:	ldx     #$00
000062r 1  8A           	txa
000063r 1  4C rr rr     	jmp     incsp8
000066r 1               
000066r 1               .endproc
000066r 1               
000066r 1               
