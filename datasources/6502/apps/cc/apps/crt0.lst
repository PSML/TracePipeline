ca65 V2.14.0
Main file   : crt0.s
Current file: crt0.s

000000r 1               ; ---------------------------------------------------------------------------
000000r 1               ; crt0.s
000000r 1               ; ---------------------------------------------------------------------------
000000r 1               ;
000000r 1               ; Startup code for cc65 (BU 6502 SIM) based on recommended code in cc65
000000r 1               ; customization documentation
000000r 1               
000000r 1               .export   _init, _exit
000000r 1               .import   _main, _nmi_int, _irq_int
000000r 1               
000000r 1               .export   __STARTUP__ : absolute = 1        ; Mark as startup
000000r 1               .import   __STACKSTART__, __STACKSIZE__
000000r 1               .import    copydata, zerobss, initlib, donelib
000000r 1               
000000r 1               .include  "zeropage.inc"
000000r 2               ;
000000r 2               ; zeropage.inc
000000r 2               ;
000000r 2               ; (C) Copyright 2002-2012, Ullrich von Bassewitz (uz@cc65.org)
000000r 2               ;
000000r 2               
000000r 2               ; Assembler include file that imports the runtime zero page locations used
000000r 2               ; by the compiler, ready for usage in asm code.
000000r 2               
000000r 2               
000000r 2                       .globalzp       sp, sreg, regsave
000000r 2                       .globalzp       ptr1, ptr2, ptr3, ptr4
000000r 2                       .globalzp       tmp1, tmp2, tmp3, tmp4
000000r 2                       .globalzp       regbank
000000r 2               
000000r 2               ; The size of the register bank
000000r 2               regbanksize     = 6
000000r 2               
000000r 2               ; The total amount of zero page space used
000000r 2               zpspace         = 26
000000r 2               
000000r 2               ; The amount of space that needs to be saved by an interrupt handler that
000000r 2               ; calls C code (does not include the register bank, which is saved by the
000000r 2               ; generated C code if required).
000000r 2               zpsavespace     = zpspace - regbanksize
000000r 2               
000000r 2               
000000r 1               
000000r 1               ; ---------------------------------------------------------------------------
000000r 1               ; Place the startup code in a special segment
000000r 1               
000000r 1               .segment  "STARTUP"
000000r 1               
000000r 1               ; ---------------------------------------------------------------------------
000000r 1               ; A little light 6502 housekeeping
000000r 1               
000000r 1  A2 FF        _init:    LDX     #$FF                 ; Initialize stack pointer to $01FF
000002r 1  9A                     TXS
000003r 1  D8                     CLD                          ; Clear decimal mode
000004r 1               
000004r 1               ; ---------------------------------------------------------------------------
000004r 1               ; Set cc65 argument stack pointer
000004r 1               
000004r 1  A9 rr                  LDA     #<(__STACKSTART__)
000006r 1  85 rr                  STA     sp
000008r 1  A9 rr                  LDA     #>(__STACKSTART__)
00000Ar 1  85 rr                  STA     sp+1
00000Cr 1               
00000Cr 1               ; ---------------------------------------------------------------------------
00000Cr 1               ; Initialize memory storage
00000Cr 1               
00000Cr 1  20 rr rr               JSR     zerobss              ; Clear BSS segment
00000Fr 1  20 rr rr               JSR     copydata             ; Initialize DATA segment
000012r 1  20 rr rr               JSR     initlib              ; Run constructors
000015r 1               
000015r 1               ; ---------------------------------------------------------------------------
000015r 1               ; Call main()
000015r 1               
000015r 1  20 rr rr               JSR     _main
000018r 1               
000018r 1               ; ---------------------------------------------------------------------------
000018r 1               ; Back from main (this is also the _exit entry):  force a software break
000018r 1               
000018r 1  20 rr rr     _exit:    JSR     donelib              ; Run destructors
00001Br 1  00                     BRK
00001Cr 1               
00001Cr 1               
00001Cr 1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr        .addr      _nmi_int    ; NMI vector
000002r 1  rr rr        .addr      _init       ; Reset vector
000004r 1  rr rr        .addr      _irq_int    ; IRQ/BRK vector
000004r 1               
