ca65 V2.14.0
Main file   : fibtbl.s
Current file: fibtbl.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.14.0
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.14.0"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_cprintf
000000r 1               	.import		_cscanf
000000r 1               	.export		_fibtbl
000000r 1               	.export		_fib
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               _fibtbl:
000000r 1  00 00 00 00  	.dword	$00000000
000004r 1  01 00 00 00  	.dword	$00000001
000008r 1  01 00 00 00  	.dword	$00000001
00000Cr 1  02 00 00 00  	.dword	$00000002
000010r 1  03 00 00 00  	.dword	$00000003
000014r 1  05 00 00 00  	.dword	$00000005
000018r 1  08 00 00 00  	.dword	$00000008
00001Cr 1  0D 00 00 00  	.dword	$0000000D
000020r 1  15 00 00 00  	.dword	$00000015
000024r 1  22 00 00 00  	.dword	$00000022
000028r 1  37 00 00 00  	.dword	$00000037
00002Cr 1  59 00 00 00  	.dword	$00000059
000030r 1  90 00 00 00  	.dword	$00000090
000034r 1  E9 00 00 00  	.dword	$000000E9
000038r 1  79 01 00 00  	.dword	$00000179
00003Cr 1  62 02 00 00  	.dword	$00000262
000040r 1  DB 03 00 00  	.dword	$000003DB
000044r 1  3D 06 00 00  	.dword	$0000063D
000048r 1  18 0A 00 00  	.dword	$00000A18
00004Cr 1  55 10 00 00  	.dword	$00001055
000050r 1  6D 1A 00 00  	.dword	$00001A6D
000054r 1  C2 2A 00 00  	.dword	$00002AC2
000058r 1  2F 45 00 00  	.dword	$0000452F
00005Cr 1  F1 6F 00 00  	.dword	$00006FF1
000060r 1  20 B5 00 00  	.dword	$0000B520
000064r 1  11 25 01 00  	.dword	$00012511
000068r 1  31 DA 01 00  	.dword	$0001DA31
00006Cr 1  42 FF 02 00  	.dword	$0002FF42
000070r 1  73 D9 04 00  	.dword	$0004D973
000074r 1  B5 D8 07 00  	.dword	$0007D8B5
000078r 1  28 B2 0C 00  	.dword	$000CB228
00007Cr 1  DD 8A 14 00  	.dword	$00148ADD
000080r 1  05 3D 21 00  	.dword	$00213D05
000084r 1  E2 C7 35 00  	.dword	$0035C7E2
000088r 1  E7 04 57 00  	.dword	$005704E7
00008Cr 1  C9 CC 8C 00  	.dword	$008CCCC9
000090r 1  B0 D1 E3 00  	.dword	$00E3D1B0
000094r 1  79 9E 70 01  	.dword	$01709E79
000098r 1  29 70 54 02  	.dword	$02547029
00009Cr 1  A2 0E C5 03  	.dword	$03C50EA2
0000A0r 1  CB 7E 19 06  	.dword	$06197ECB
0000A4r 1  6D 8D DE 09  	.dword	$09DE8D6D
0000A8r 1  38 0C F8 0F  	.dword	$0FF80C38
0000ACr 1  A5 99 D6 19  	.dword	$19D699A5
0000B0r 1  DD A5 CE 29  	.dword	$29CEA5DD
0000B4r 1  82 3F A5 43  	.dword	$43A53F82
0000B8r 1  5F E5 73 6D  	.dword	$6D73E55F
0000BCr 1  E1 24 19 B1  	.dword	$B11924E1
0000C0r 1               
0000C0r 1               .segment	"RODATA"
000000r 1               
000000r 1               L004A:
000000r 1  25 6C 75 0A  	.byte	$25,$6C,$75,$0A,$00
000004r 1  00           
000005r 1               L0043:
000005r 1  2D 31 0A 00  	.byte	$2D,$31,$0A,$00
000009r 1               L003B:
000009r 1  25 6C 64 00  	.byte	$25,$6C,$64,$00
00000Dr 1               
00000Dr 1               ; ---------------------------------------------------------------
00000Dr 1               ; unsigned long __near__ fib (long)
00000Dr 1               ; ---------------------------------------------------------------
00000Dr 1               
00000Dr 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_fib: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     ldeax0sp
000003r 1  20 rr rr     	jsr     aslax2
000006r 1  18           	clc
000007r 1  69 rr        	adc     #<(_fibtbl)
000009r 1  A8           	tay
00000Ar 1  8A           	txa
00000Br 1  69 rr        	adc     #>(_fibtbl)
00000Dr 1  AA           	tax
00000Er 1  98           	tya
00000Fr 1  20 rr rr     	jsr     ldeaxi
000012r 1  4C rr rr     	jmp     incsp4
000015r 1               
000015r 1               .endproc
000015r 1               
000015r 1               ; ---------------------------------------------------------------
000015r 1               ; int __near__ main (void)
000015r 1               ; ---------------------------------------------------------------
000015r 1               
000015r 1               .segment	"CODE"
000015r 1               
000015r 1               .proc	_main: near
000015r 1               
000015r 1               .segment	"CODE"
000015r 1               
000015r 1  20 rr rr     	jsr     decsp8
000018r 1  A9 rr        L0035:	lda     #<(L003B)
00001Ar 1  A2 rr        	ldx     #>(L003B)
00001Cr 1  20 rr rr     	jsr     pushax
00001Fr 1  A5 rr        	lda     sp
000021r 1  A6 rr        	ldx     sp+1
000023r 1  18           	clc
000024r 1  69 06        	adc     #$06
000026r 1  90 01        	bcc     L003E
000028r 1  E8           	inx
000029r 1  20 rr rr     L003E:	jsr     pushax
00002Cr 1  A0 04        	ldy     #$04
00002Er 1  20 rr rr     	jsr     _cscanf
000031r 1  E0 00        	cpx     #$00
000033r 1  D0 04        	bne     L004E
000035r 1  C9 00        	cmp     #$00
000037r 1  F0 49        	beq     L004F
000039r 1  A0 07        L004E:	ldy     #$07
00003Br 1  20 rr rr     	jsr     ldeaxysp
00003Er 1  20 rr rr     	jsr     pusheax
000041r 1  A2 00        	ldx     #$00
000043r 1  86 rr        	stx     sreg
000045r 1  86 rr        	stx     sreg+1
000047r 1  A9 30        	lda     #$30
000049r 1  20 rr rr     	jsr     tosgeeax
00004Cr 1  F0 0F        	beq     L0040
00004Er 1  A9 rr        	lda     #<(L0043)
000050r 1  A2 rr        	ldx     #>(L0043)
000052r 1  20 rr rr     	jsr     pushax
000055r 1  A0 02        	ldy     #$02
000057r 1  20 rr rr     	jsr     _cprintf
00005Ar 1  4C rr rr     	jmp     L0035
00005Dr 1  A0 07        L0040:	ldy     #$07
00005Fr 1  20 rr rr     	jsr     ldeaxysp
000062r 1  20 rr rr     	jsr     pusheax
000065r 1  20 rr rr     	jsr     _fib
000068r 1  20 rr rr     	jsr     steax0sp
00006Br 1  A9 rr        	lda     #<(L004A)
00006Dr 1  A2 rr        	ldx     #>(L004A)
00006Fr 1  20 rr rr     	jsr     pushax
000072r 1  A0 05        	ldy     #$05
000074r 1  20 rr rr     	jsr     ldeaxysp
000077r 1  20 rr rr     	jsr     pusheax
00007Ar 1  A0 06        	ldy     #$06
00007Cr 1  20 rr rr     	jsr     _cprintf
00007Fr 1  4C rr rr     	jmp     L0035
000082r 1  4C rr rr     L004F:	jmp     incsp8
000085r 1               
000085r 1               .endproc
000085r 1               
000085r 1               
