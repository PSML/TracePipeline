ca65 V2.14.0
Main file   : hello.s
Current file: hello.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.14.0
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.14.0"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_cprintf
000000r 1               	.export		_str
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               _str:
000000r 1  4D 79 20 73  	.byte	$4D,$79,$20,$73,$74,$72,$69,$6E,$67,$2E,$00
000004r 1  74 72 69 6E  
000008r 1  67 2E 00     
00000Br 1  00 00 00 00  	.res	69,$00
00000Fr 1  00 00 00 00  
000013r 1  00 00 00 00  
000050r 1               
000050r 1               .segment	"RODATA"
000000r 1               
000000r 1               L0017:
000000r 1  73 69 7A 65  	.byte	$73,$69,$7A,$65,$6F,$66,$28,$69,$6E,$74,$29,$3D,$25,$64,$20,$73
000004r 1  6F 66 28 69  
000008r 1  6E 74 29 3D  
000010r 1  69 7A 65 6F  	.byte	$69,$7A,$65,$6F,$66,$28,$6C,$6F,$6E,$67,$29,$3D,$25,$64,$20,$73
000014r 1  66 28 6C 6F  
000018r 1  6E 67 29 3D  
000020r 1  69 7A 65 6F  	.byte	$69,$7A,$65,$6F,$66,$28,$75,$6E,$73,$69,$67,$6E,$65,$64,$20,$6C
000024r 1  66 28 75 6E  
000028r 1  73 69 67 6E  
000030r 1  6F 6E 67 29  	.byte	$6F,$6E,$67,$29,$3D,$25,$64,$0A,$00
000034r 1  3D 25 64 0A  
000038r 1  00           
000039r 1               L0007:
000039r 1  48 65 6C 6C  	.byte	$48,$65,$6C,$6C,$6F,$20,$57,$6F,$72,$6C,$64,$21,$21,$21,$0A,$00
00003Dr 1  6F 20 57 6F  
000041r 1  72 6C 64 21  
000049r 1               L000E:
000049r 1  69 3D 25 64  	.byte	$69,$3D,$25,$64,$20,$28,$25,$78,$29,$0A,$00
00004Dr 1  20 28 25 78  
000051r 1  29 0A 00     
000054r 1               L0013:
000054r 1  73 74 72 3D  	.byte	$73,$74,$72,$3D,$25,$73,$0A,$00
000058r 1  25 73 0A 00  
00005Cr 1               L000A:
00005Cr 1  63 3D 25 63  	.byte	$63,$3D,$25,$63,$0A,$00
000060r 1  0A 00        
000062r 1               
000062r 1               ; ---------------------------------------------------------------
000062r 1               ; int __near__ main (void)
000062r 1               ; ---------------------------------------------------------------
000062r 1               
000062r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  A9 61        	lda     #$61
000002r 1  20 rr rr     	jsr     pusha
000005r 1  A9 2D        	lda     #$2D
000007r 1  20 rr rr     	jsr     pusha0
00000Ar 1  A9 rr        	lda     #<(L0007)
00000Cr 1  A2 rr        	ldx     #>(L0007)
00000Er 1  20 rr rr     	jsr     pushax
000011r 1  A0 02        	ldy     #$02
000013r 1  20 rr rr     	jsr     _cprintf
000016r 1  A9 rr        	lda     #<(L000A)
000018r 1  A2 rr        	ldx     #>(L000A)
00001Ar 1  20 rr rr     	jsr     pushax
00001Dr 1  A0 04        	ldy     #$04
00001Fr 1  B1 rr        	lda     (sp),y
000021r 1  20 rr rr     	jsr     pusha0
000024r 1  A0 04        	ldy     #$04
000026r 1  20 rr rr     	jsr     _cprintf
000029r 1  A9 rr        	lda     #<(L000E)
00002Br 1  A2 rr        	ldx     #>(L000E)
00002Dr 1  20 rr rr     	jsr     pushax
000030r 1  A0 05        	ldy     #$05
000032r 1  20 rr rr     	jsr     pushwysp
000035r 1  A0 07        	ldy     #$07
000037r 1  20 rr rr     	jsr     pushwysp
00003Ar 1  A0 06        	ldy     #$06
00003Cr 1  20 rr rr     	jsr     _cprintf
00003Fr 1  A9 rr        	lda     #<(L0013)
000041r 1  A2 rr        	ldx     #>(L0013)
000043r 1  20 rr rr     	jsr     pushax
000046r 1  A9 rr        	lda     #<(_str)
000048r 1  A2 rr        	ldx     #>(_str)
00004Ar 1  20 rr rr     	jsr     pushax
00004Dr 1  A0 04        	ldy     #$04
00004Fr 1  20 rr rr     	jsr     _cprintf
000052r 1  A9 rr        	lda     #<(L0017)
000054r 1  A2 rr        	ldx     #>(L0017)
000056r 1  20 rr rr     	jsr     pushax
000059r 1  A9 02        	lda     #$02
00005Br 1  20 rr rr     	jsr     pusha0
00005Er 1  A9 04        	lda     #$04
000060r 1  20 rr rr     	jsr     pusha0
000063r 1  20 rr rr     	jsr     pusha0
000066r 1  A0 08        	ldy     #$08
000068r 1  20 rr rr     	jsr     _cprintf
00006Br 1  A2 00        	ldx     #$00
00006Dr 1  8A           	txa
00006Er 1  4C rr rr     	jmp     incsp3
000071r 1               
000071r 1               .endproc
000071r 1               
000071r 1               
