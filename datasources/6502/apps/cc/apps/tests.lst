ca65 V2.14.0
Main file   : tests.s
Current file: tests.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.14.0
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.14.0"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_cprintf
000000r 1               	.export		_a8
000000r 1               	.export		_b8
000000r 1               	.export		_c8
000000r 1               	.export		_ua8
000000r 1               	.export		_ub8
000000r 1               	.export		_uc8
000000r 1               	.export		_a32
000000r 1               	.export		_b32
000000r 1               	.export		_c32
000000r 1               	.export		_ua32
000000r 1               	.export		_ub32
000000r 1               	.export		_uc32
000000r 1               	.export		_uint32_loop
000000r 1               	.export		_int8_add
000000r 1               	.export		_int8_sub
000000r 1               	.export		_uint8_add
000000r 1               	.export		_uint8_sub
000000r 1               	.export		_uint8_mult3
000000r 1               	.export		_int32_add
000000r 1               	.export		_int32_sub
000000r 1               	.export		_uint32_add
000000r 1               	.export		_uint32_sub
000000r 1               	.export		_uint32_div2
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               _a8:
000000r 1  FF           	.byte	$FF
000001r 1               _b8:
000001r 1  01           	.byte	$01
000002r 1               _ua8:
000002r 1  FF           	.byte	$FF
000003r 1               _ub8:
000003r 1  01           	.byte	$01
000004r 1               _a32:
000004r 1  33 33 00 00  	.dword	$00003333
000008r 1               _b32:
000008r 1  44 44 00 00  	.dword	$00004444
00000Cr 1               _ua32:
00000Cr 1  33 33 00 00  	.dword	$00003333
000010r 1               _ub32:
000010r 1  44 44 00 00  	.dword	$00004444
000014r 1               
000014r 1               .segment	"RODATA"
000000r 1               
000000r 1               L0013:
000000r 1  75 69 6E 74  	.byte	$75,$69,$6E,$74,$33,$32,$5F,$6C,$6F,$6F,$70,$3A,$20,$75,$61,$3D
000004r 1  33 32 5F 6C  
000008r 1  6F 6F 70 3A  
000010r 1  30 78 25 6C  	.byte	$30,$78,$25,$6C,$78,$20,$28,$25,$6C,$64,$29,$0A,$00
000014r 1  78 20 28 25  
000018r 1  6C 64 29 0A  
00001Dr 1               
00001Dr 1               .segment	"BSS"
000000r 1               
000000r 1               _c8:
000000r 1  00           	.res	1,$00
000001r 1               _uc8:
000001r 1  00           	.res	1,$00
000002r 1               _c32:
000002r 1  00 00 00 00  	.res	4,$00
000006r 1               _uc32:
000006r 1  00 00 00 00  	.res	4,$00
00000Ar 1               
00000Ar 1               ; ---------------------------------------------------------------
00000Ar 1               ; void __near__ uint32_loop (void)
00000Ar 1               ; ---------------------------------------------------------------
00000Ar 1               
00000Ar 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_uint32_loop: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  A2 00        	ldx     #$00
000002r 1  A9 01        	lda     #$01
000004r 1  8D rr rr     	sta     _ua32
000007r 1  8E rr rr     	stx     _ua32+1
00000Ar 1  8E rr rr     	stx     _ua32+2
00000Dr 1  8E rr rr     	stx     _ua32+3
000010r 1  AD rr rr     L000A:	lda     _ua32+3
000013r 1  85 rr        	sta     sreg+1
000015r 1  AD rr rr     	lda     _ua32+2
000018r 1  85 rr        	sta     sreg
00001Ar 1  AD rr rr     	lda     _ua32
00001Dr 1  C9 02        	cmp     #$02
00001Fr 1  AD rr rr     	lda     _ua32+1
000022r 1  E9 00        	sbc     #$00
000024r 1  A5 rr        	lda     sreg
000026r 1  E9 00        	sbc     #$00
000028r 1  A5 rr        	lda     sreg+1
00002Ar 1  E9 00        	sbc     #$00
00002Cr 1  B0 60        	bcs     L000B
00002Er 1  A9 rr        	lda     #<(L0013)
000030r 1  A2 rr        	ldx     #>(L0013)
000032r 1  20 rr rr     	jsr     pushax
000035r 1  AD rr rr     	lda     _ua32+3
000038r 1  85 rr        	sta     sreg+1
00003Ar 1  AD rr rr     	lda     _ua32+2
00003Dr 1  85 rr        	sta     sreg
00003Fr 1  AE rr rr     	ldx     _ua32+1
000042r 1  AD rr rr     	lda     _ua32
000045r 1  20 rr rr     	jsr     pusheax
000048r 1  AD rr rr     	lda     _ua32+3
00004Br 1  85 rr        	sta     sreg+1
00004Dr 1  AD rr rr     	lda     _ua32+2
000050r 1  85 rr        	sta     sreg
000052r 1  AE rr rr     	ldx     _ua32+1
000055r 1  AD rr rr     	lda     _ua32
000058r 1  20 rr rr     	jsr     pusheax
00005Br 1  A0 0A        	ldy     #$0A
00005Dr 1  20 rr rr     	jsr     _cprintf
000060r 1  AD rr rr     	lda     _ua32+3
000063r 1  85 rr        	sta     sreg+1
000065r 1  AD rr rr     	lda     _ua32+2
000068r 1  85 rr        	sta     sreg
00006Ar 1  AE rr rr     	ldx     _ua32+1
00006Dr 1  AD rr rr     	lda     _ua32
000070r 1  20 rr rr     	jsr     saveeax
000073r 1  A0 01        	ldy     #$01
000075r 1  20 rr rr     	jsr     inceaxy
000078r 1  8D rr rr     	sta     _ua32
00007Br 1  8E rr rr     	stx     _ua32+1
00007Er 1  A4 rr        	ldy     sreg
000080r 1  8C rr rr     	sty     _ua32+2
000083r 1  A4 rr        	ldy     sreg+1
000085r 1  8C rr rr     	sty     _ua32+3
000088r 1  20 rr rr     	jsr     resteax
00008Br 1  4C rr rr     	jmp     L000A
00008Er 1  60           L000B:	rts
00008Fr 1               
00008Fr 1               .endproc
00008Fr 1               
00008Fr 1               ; ---------------------------------------------------------------
00008Fr 1               ; void __near__ int8_add (void)
00008Fr 1               ; ---------------------------------------------------------------
00008Fr 1               
00008Fr 1               .segment	"CODE"
00008Fr 1               
00008Fr 1               .proc	_int8_add: near
00008Fr 1               
00008Fr 1               .segment	"CODE"
00008Fr 1               
00008Fr 1  A2 00        	ldx     #$00
000091r 1  AD rr rr     	lda     _a8
000094r 1  10 01        	bpl     L001A
000096r 1  CA           	dex
000097r 1  85 rr        L001A:	sta     ptr1
000099r 1  86 rr        	stx     ptr1+1
00009Br 1  A2 00        	ldx     #$00
00009Dr 1  AD rr rr     	lda     _b8
0000A0r 1  10 01        	bpl     L001B
0000A2r 1  CA           	dex
0000A3r 1  18           L001B:	clc
0000A4r 1  65 rr        	adc     ptr1
0000A6r 1  8D rr rr     	sta     _c8
0000A9r 1  8A           	txa
0000AAr 1  65 rr        	adc     ptr1+1
0000ACr 1  60           	rts
0000ADr 1               
0000ADr 1               .endproc
0000ADr 1               
0000ADr 1               ; ---------------------------------------------------------------
0000ADr 1               ; void __near__ int8_sub (void)
0000ADr 1               ; ---------------------------------------------------------------
0000ADr 1               
0000ADr 1               .segment	"CODE"
0000ADr 1               
0000ADr 1               .proc	_int8_sub: near
0000ADr 1               
0000ADr 1               .segment	"CODE"
0000ADr 1               
0000ADr 1  A2 00        	ldx     #$00
0000AFr 1  AD rr rr     	lda     _a8
0000B2r 1  10 01        	bpl     L001F
0000B4r 1  CA           	dex
0000B5r 1  20 rr rr     L001F:	jsr     pushax
0000B8r 1  A2 00        	ldx     #$00
0000BAr 1  AD rr rr     	lda     _b8
0000BDr 1  10 01        	bpl     L0020
0000BFr 1  CA           	dex
0000C0r 1  20 rr rr     L0020:	jsr     tossubax
0000C3r 1  8D rr rr     	sta     _c8
0000C6r 1  60           	rts
0000C7r 1               
0000C7r 1               .endproc
0000C7r 1               
0000C7r 1               ; ---------------------------------------------------------------
0000C7r 1               ; void __near__ uint8_add (void)
0000C7r 1               ; ---------------------------------------------------------------
0000C7r 1               
0000C7r 1               .segment	"CODE"
0000C7r 1               
0000C7r 1               .proc	_uint8_add: near
0000C7r 1               
0000C7r 1               .segment	"CODE"
0000C7r 1               
0000C7r 1  AD rr rr     	lda     _ua8
0000CAr 1  18           	clc
0000CBr 1  6D rr rr     	adc     _ub8
0000CEr 1  8D rr rr     	sta     _uc8
0000D1r 1  60           	rts
0000D2r 1               
0000D2r 1               .endproc
0000D2r 1               
0000D2r 1               ; ---------------------------------------------------------------
0000D2r 1               ; void __near__ uint8_sub (void)
0000D2r 1               ; ---------------------------------------------------------------
0000D2r 1               
0000D2r 1               .segment	"CODE"
0000D2r 1               
0000D2r 1               .proc	_uint8_sub: near
0000D2r 1               
0000D2r 1               .segment	"CODE"
0000D2r 1               
0000D2r 1  AD rr rr     	lda     _ua8
0000D5r 1  38           	sec
0000D6r 1  ED rr rr     	sbc     _ub8
0000D9r 1  8D rr rr     	sta     _uc8
0000DCr 1  60           	rts
0000DDr 1               
0000DDr 1               .endproc
0000DDr 1               
0000DDr 1               ; ---------------------------------------------------------------
0000DDr 1               ; void __near__ uint8_mult3 (void)
0000DDr 1               ; ---------------------------------------------------------------
0000DDr 1               
0000DDr 1               .segment	"CODE"
0000DDr 1               
0000DDr 1               .proc	_uint8_mult3: near
0000DDr 1               
0000DDr 1               .segment	"CODE"
0000DDr 1               
0000DDr 1  A2 00        	ldx     #$00
0000DFr 1  AD rr rr     	lda     _ua8
0000E2r 1  20 rr rr     	jsr     mulax3
0000E5r 1  A0 00        	ldy     #$00
0000E7r 1  8D rr rr     	sta     _uc32
0000EAr 1  8E rr rr     	stx     _uc32+1
0000EDr 1  8C rr rr     	sty     _uc32+2
0000F0r 1  8C rr rr     	sty     _uc32+3
0000F3r 1  60           	rts
0000F4r 1               
0000F4r 1               .endproc
0000F4r 1               
0000F4r 1               ; ---------------------------------------------------------------
0000F4r 1               ; void __near__ int32_add (void)
0000F4r 1               ; ---------------------------------------------------------------
0000F4r 1               
0000F4r 1               .segment	"CODE"
0000F4r 1               
0000F4r 1               .proc	_int32_add: near
0000F4r 1               
0000F4r 1               .segment	"CODE"
0000F4r 1               
0000F4r 1  AD rr rr     	lda     _a32+3
0000F7r 1  85 rr        	sta     sreg+1
0000F9r 1  AD rr rr     	lda     _a32+2
0000FCr 1  85 rr        	sta     sreg
0000FEr 1  AE rr rr     	ldx     _a32+1
000101r 1  AD rr rr     	lda     _a32
000104r 1  20 rr rr     	jsr     pusheax
000107r 1  AD rr rr     	lda     _b32+3
00010Ar 1  85 rr        	sta     sreg+1
00010Cr 1  AD rr rr     	lda     _b32+2
00010Fr 1  85 rr        	sta     sreg
000111r 1  AE rr rr     	ldx     _b32+1
000114r 1  AD rr rr     	lda     _b32
000117r 1  20 rr rr     	jsr     tosaddeax
00011Ar 1  8D rr rr     	sta     _c32
00011Dr 1  8E rr rr     	stx     _c32+1
000120r 1  A4 rr        	ldy     sreg
000122r 1  8C rr rr     	sty     _c32+2
000125r 1  A4 rr        	ldy     sreg+1
000127r 1  8C rr rr     	sty     _c32+3
00012Ar 1  60           	rts
00012Br 1               
00012Br 1               .endproc
00012Br 1               
00012Br 1               ; ---------------------------------------------------------------
00012Br 1               ; void __near__ int32_sub (void)
00012Br 1               ; ---------------------------------------------------------------
00012Br 1               
00012Br 1               .segment	"CODE"
00012Br 1               
00012Br 1               .proc	_int32_sub: near
00012Br 1               
00012Br 1               .segment	"CODE"
00012Br 1               
00012Br 1  AD rr rr     	lda     _a32+3
00012Er 1  85 rr        	sta     sreg+1
000130r 1  AD rr rr     	lda     _a32+2
000133r 1  85 rr        	sta     sreg
000135r 1  AE rr rr     	ldx     _a32+1
000138r 1  AD rr rr     	lda     _a32
00013Br 1  20 rr rr     	jsr     pusheax
00013Er 1  AD rr rr     	lda     _b32+3
000141r 1  85 rr        	sta     sreg+1
000143r 1  AD rr rr     	lda     _b32+2
000146r 1  85 rr        	sta     sreg
000148r 1  AE rr rr     	ldx     _b32+1
00014Br 1  AD rr rr     	lda     _b32
00014Er 1  20 rr rr     	jsr     tossubeax
000151r 1  8D rr rr     	sta     _c32
000154r 1  8E rr rr     	stx     _c32+1
000157r 1  A4 rr        	ldy     sreg
000159r 1  8C rr rr     	sty     _c32+2
00015Cr 1  A4 rr        	ldy     sreg+1
00015Er 1  8C rr rr     	sty     _c32+3
000161r 1  60           	rts
000162r 1               
000162r 1               .endproc
000162r 1               
000162r 1               ; ---------------------------------------------------------------
000162r 1               ; void __near__ uint32_add (void)
000162r 1               ; ---------------------------------------------------------------
000162r 1               
000162r 1               .segment	"CODE"
000162r 1               
000162r 1               .proc	_uint32_add: near
000162r 1               
000162r 1               .segment	"CODE"
000162r 1               
000162r 1  AD rr rr     	lda     _ua32+3
000165r 1  85 rr        	sta     sreg+1
000167r 1  AD rr rr     	lda     _ua32+2
00016Ar 1  85 rr        	sta     sreg
00016Cr 1  AE rr rr     	ldx     _ua32+1
00016Fr 1  AD rr rr     	lda     _ua32
000172r 1  20 rr rr     	jsr     pusheax
000175r 1  AD rr rr     	lda     _ub32+3
000178r 1  85 rr        	sta     sreg+1
00017Ar 1  AD rr rr     	lda     _ub32+2
00017Dr 1  85 rr        	sta     sreg
00017Fr 1  AE rr rr     	ldx     _ub32+1
000182r 1  AD rr rr     	lda     _ub32
000185r 1  20 rr rr     	jsr     tosaddeax
000188r 1  8D rr rr     	sta     _uc32
00018Br 1  8E rr rr     	stx     _uc32+1
00018Er 1  A4 rr        	ldy     sreg
000190r 1  8C rr rr     	sty     _uc32+2
000193r 1  A4 rr        	ldy     sreg+1
000195r 1  8C rr rr     	sty     _uc32+3
000198r 1  60           	rts
000199r 1               
000199r 1               .endproc
000199r 1               
000199r 1               ; ---------------------------------------------------------------
000199r 1               ; void __near__ uint32_sub (void)
000199r 1               ; ---------------------------------------------------------------
000199r 1               
000199r 1               .segment	"CODE"
000199r 1               
000199r 1               .proc	_uint32_sub: near
000199r 1               
000199r 1               .segment	"CODE"
000199r 1               
000199r 1  AD rr rr     	lda     _ua32+3
00019Cr 1  85 rr        	sta     sreg+1
00019Er 1  AD rr rr     	lda     _ua32+2
0001A1r 1  85 rr        	sta     sreg
0001A3r 1  AE rr rr     	ldx     _ua32+1
0001A6r 1  AD rr rr     	lda     _ua32
0001A9r 1  20 rr rr     	jsr     pusheax
0001ACr 1  AD rr rr     	lda     _ub32+3
0001AFr 1  85 rr        	sta     sreg+1
0001B1r 1  AD rr rr     	lda     _ub32+2
0001B4r 1  85 rr        	sta     sreg
0001B6r 1  AE rr rr     	ldx     _ub32+1
0001B9r 1  AD rr rr     	lda     _ub32
0001BCr 1  20 rr rr     	jsr     tossubeax
0001BFr 1  8D rr rr     	sta     _uc32
0001C2r 1  8E rr rr     	stx     _uc32+1
0001C5r 1  A4 rr        	ldy     sreg
0001C7r 1  8C rr rr     	sty     _uc32+2
0001CAr 1  A4 rr        	ldy     sreg+1
0001CCr 1  8C rr rr     	sty     _uc32+3
0001CFr 1  60           	rts
0001D0r 1               
0001D0r 1               .endproc
0001D0r 1               
0001D0r 1               ; ---------------------------------------------------------------
0001D0r 1               ; void __near__ uint32_div2 (void)
0001D0r 1               ; ---------------------------------------------------------------
0001D0r 1               
0001D0r 1               .segment	"CODE"
0001D0r 1               
0001D0r 1               .proc	_uint32_div2: near
0001D0r 1               
0001D0r 1               .segment	"CODE"
0001D0r 1               
0001D0r 1  AD rr rr     	lda     _ua32+3
0001D3r 1  85 rr        	sta     sreg+1
0001D5r 1  AD rr rr     	lda     _ua32+2
0001D8r 1  85 rr        	sta     sreg
0001DAr 1  AE rr rr     	ldx     _ua32+1
0001DDr 1  AD rr rr     	lda     _ua32
0001E0r 1  20 rr rr     	jsr     shreax1
0001E3r 1  8D rr rr     	sta     _uc32
0001E6r 1  8E rr rr     	stx     _uc32+1
0001E9r 1  A4 rr        	ldy     sreg
0001EBr 1  8C rr rr     	sty     _uc32+2
0001EEr 1  A4 rr        	ldy     sreg+1
0001F0r 1  8C rr rr     	sty     _uc32+3
0001F3r 1  60           	rts
0001F4r 1               
0001F4r 1               .endproc
0001F4r 1               
0001F4r 1               ; ---------------------------------------------------------------
0001F4r 1               ; int __near__ main (void)
0001F4r 1               ; ---------------------------------------------------------------
0001F4r 1               
0001F4r 1               .segment	"CODE"
0001F4r 1               
0001F4r 1               .proc	_main: near
0001F4r 1               
0001F4r 1               .segment	"CODE"
0001F4r 1               
0001F4r 1  20 rr rr     	jsr     _uint32_loop
0001F7r 1  A2 00        	ldx     #$00
0001F9r 1  8A           	txa
0001FAr 1  60           	rts
0001FBr 1               
0001FBr 1               .endproc
0001FBr 1               
0001FBr 1               
