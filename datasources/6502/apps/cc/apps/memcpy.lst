ca65 V2.14.0
Main file   : memcpy.s
Current file: memcpy.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.14.0
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.14.0"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.export		_src
000000r 1               	.export		_dst
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               _src:
000000r 1  48 65 6C 6C  	.byte	$48,$65,$6C,$6C,$6F,$20,$57,$6F,$72,$6C,$64,$00
000004r 1  6F 20 57 6F  
000008r 1  72 6C 64 00  
00000Cr 1               
00000Cr 1               .segment	"BSS"
000000r 1               
000000r 1               _dst:
000000r 1  00 00 00 00  	.res	12,$00
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
00000Cr 1               
00000Cr 1               ; ---------------------------------------------------------------
00000Cr 1               ; int __near__ main (void)
00000Cr 1               ; ---------------------------------------------------------------
00000Cr 1               
00000Cr 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  A9 00        	lda     #$00
000002r 1  20 rr rr     	jsr     pusha
000005r 1  A9 rr        L0006:	lda     #<(_dst)
000007r 1  A2 rr        	ldx     #>(_dst)
000009r 1  A0 00        	ldy     #$00
00000Br 1  18           	clc
00000Cr 1  71 rr        	adc     (sp),y
00000Er 1  90 01        	bcc     L000C
000010r 1  E8           	inx
000011r 1  20 rr rr     L000C:	jsr     pushax
000014r 1  A0 02        	ldy     #$02
000016r 1  B1 rr        	lda     (sp),y
000018r 1  A8           	tay
000019r 1  B9 rr rr     	lda     _src,y
00001Cr 1  A0 00        	ldy     #$00
00001Er 1  20 rr rr     	jsr     staspidx
000021r 1  A0 00        	ldy     #$00
000023r 1  B1 rr        	lda     (sp),y
000025r 1  A8           	tay
000026r 1  A2 00        	ldx     #$00
000028r 1  B9 rr rr     	lda     _src,y
00002Br 1  F0 0C        	beq     L0017
00002Dr 1  A0 00        	ldy     #$00
00002Fr 1  B1 rr        	lda     (sp),y
000031r 1  18           	clc
000032r 1  69 01        	adc     #$01
000034r 1  91 rr        	sta     (sp),y
000036r 1  4C rr rr     	jmp     L0006
000039r 1  4C rr rr     L0017:	jmp     incsp1
00003Cr 1               
00003Cr 1               .endproc
00003Cr 1               
00003Cr 1               
