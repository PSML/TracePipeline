ca65 V2.14.0
Main file   : fib.s
Current file: fib.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.14.0
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.14.0"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_cprintf
000000r 1               	.import		_cscanf
000000r 1               	.export		_fib
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               L0021:
000000r 1  25 6C 75 0A  	.byte	$25,$6C,$75,$0A,$00
000004r 1  00           
000005r 1               L001A:
000005r 1  2D 31 0A 00  	.byte	$2D,$31,$0A,$00
000009r 1               L0012:
000009r 1  25 6C 64 00  	.byte	$25,$6C,$64,$00
00000Dr 1               
00000Dr 1               ; ---------------------------------------------------------------
00000Dr 1               ; unsigned long __near__ fib (long)
00000Dr 1               ; ---------------------------------------------------------------
00000Dr 1               
00000Dr 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_fib: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     ldeax0sp
000003r 1  20 rr rr     	jsr     pusheax
000006r 1  A2 00        	ldx     #$00
000008r 1  86 rr        	stx     sreg
00000Ar 1  86 rr        	stx     sreg+1
00000Cr 1  8A           	txa
00000Dr 1  20 rr rr     	jsr     toseqeax
000010r 1  F0 06        	beq     L0002
000012r 1  A2 00        	ldx     #$00
000014r 1  8A           	txa
000015r 1  4C rr rr     	jmp     incsp4
000018r 1  20 rr rr     L0002:	jsr     ldeax0sp
00001Br 1  20 rr rr     	jsr     pusheax
00001Er 1  A2 00        	ldx     #$00
000020r 1  86 rr        	stx     sreg
000022r 1  86 rr        	stx     sreg+1
000024r 1  A9 01        	lda     #$01
000026r 1  20 rr rr     	jsr     toseqeax
000029r 1  F0 07        	beq     L0005
00002Br 1  A2 00        	ldx     #$00
00002Dr 1  A9 01        	lda     #$01
00002Fr 1  4C rr rr     	jmp     incsp4
000032r 1  20 rr rr     L0005:	jsr     ldeax0sp
000035r 1  A0 01        	ldy     #$01
000037r 1  20 rr rr     	jsr     deceaxy
00003Ar 1  20 rr rr     	jsr     pusheax
00003Dr 1  20 rr rr     	jsr     _fib
000040r 1  20 rr rr     	jsr     pusheax
000043r 1  A0 07        	ldy     #$07
000045r 1  20 rr rr     	jsr     ldeaxysp
000048r 1  A0 02        	ldy     #$02
00004Ar 1  20 rr rr     	jsr     deceaxy
00004Dr 1  20 rr rr     	jsr     pusheax
000050r 1  20 rr rr     	jsr     _fib
000053r 1  20 rr rr     	jsr     tosaddeax
000056r 1  4C rr rr     	jmp     incsp4
000059r 1               
000059r 1               .endproc
000059r 1               
000059r 1               ; ---------------------------------------------------------------
000059r 1               ; int __near__ main (void)
000059r 1               ; ---------------------------------------------------------------
000059r 1               
000059r 1               .segment	"CODE"
000059r 1               
000059r 1               .proc	_main: near
000059r 1               
000059r 1               .segment	"CODE"
000059r 1               
000059r 1  20 rr rr     	jsr     decsp8
00005Cr 1  A9 rr        L000C:	lda     #<(L0012)
00005Er 1  A2 rr        	ldx     #>(L0012)
000060r 1  20 rr rr     	jsr     pushax
000063r 1  A5 rr        	lda     sp
000065r 1  A6 rr        	ldx     sp+1
000067r 1  18           	clc
000068r 1  69 06        	adc     #$06
00006Ar 1  90 01        	bcc     L0015
00006Cr 1  E8           	inx
00006Dr 1  20 rr rr     L0015:	jsr     pushax
000070r 1  A0 04        	ldy     #$04
000072r 1  20 rr rr     	jsr     _cscanf
000075r 1  E0 00        	cpx     #$00
000077r 1  D0 04        	bne     L0025
000079r 1  C9 00        	cmp     #$00
00007Br 1  F0 49        	beq     L0026
00007Dr 1  A0 07        L0025:	ldy     #$07
00007Fr 1  20 rr rr     	jsr     ldeaxysp
000082r 1  20 rr rr     	jsr     pusheax
000085r 1  A2 00        	ldx     #$00
000087r 1  86 rr        	stx     sreg
000089r 1  86 rr        	stx     sreg+1
00008Br 1  A9 30        	lda     #$30
00008Dr 1  20 rr rr     	jsr     tosgeeax
000090r 1  F0 0F        	beq     L0017
000092r 1  A9 rr        	lda     #<(L001A)
000094r 1  A2 rr        	ldx     #>(L001A)
000096r 1  20 rr rr     	jsr     pushax
000099r 1  A0 02        	ldy     #$02
00009Br 1  20 rr rr     	jsr     _cprintf
00009Er 1  4C rr rr     	jmp     L000C
0000A1r 1  A0 07        L0017:	ldy     #$07
0000A3r 1  20 rr rr     	jsr     ldeaxysp
0000A6r 1  20 rr rr     	jsr     pusheax
0000A9r 1  20 rr rr     	jsr     _fib
0000ACr 1  20 rr rr     	jsr     steax0sp
0000AFr 1  A9 rr        	lda     #<(L0021)
0000B1r 1  A2 rr        	ldx     #>(L0021)
0000B3r 1  20 rr rr     	jsr     pushax
0000B6r 1  A0 05        	ldy     #$05
0000B8r 1  20 rr rr     	jsr     ldeaxysp
0000BBr 1  20 rr rr     	jsr     pusheax
0000BEr 1  A0 06        	ldy     #$06
0000C0r 1  20 rr rr     	jsr     _cprintf
0000C3r 1  4C rr rr     	jmp     L000C
0000C6r 1  4C rr rr     L0026:	jmp     incsp8
0000C9r 1               
0000C9r 1               .endproc
0000C9r 1               
0000C9r 1               
