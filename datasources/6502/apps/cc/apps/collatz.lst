ca65 V2.14.0
Main file   : collatz.s
Current file: collatz.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.14.0
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.14.0"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_cprintf
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               L0019:
000000r 1  69 3D 25 6C  	.byte	$69,$3D,$25,$6C,$64,$2C,$20,$6A,$3D,$25,$6C,$64,$0A,$00
000004r 1  64 2C 20 6A  
000008r 1  3D 25 6C 64  
00000Er 1               
00000Er 1               ; ---------------------------------------------------------------
00000Er 1               ; int __near__ main (void)
00000Er 1               ; ---------------------------------------------------------------
00000Er 1               
00000Er 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     decsp8
000003r 1  A0 04        	ldy     #$04
000005r 1  A9 01        	lda     #$01
000007r 1  91 rr        	sta     (sp),y
000009r 1  A9 00        	lda     #$00
00000Br 1  C8           	iny
00000Cr 1  91 rr        	sta     (sp),y
00000Er 1  C8           	iny
00000Fr 1  91 rr        	sta     (sp),y
000011r 1  C8           	iny
000012r 1  91 rr        	sta     (sp),y
000014r 1  A0 07        L0002:	ldy     #$07
000016r 1  20 rr rr     	jsr     ldeaxysp
000019r 1  C9 20        	cmp     #$20
00001Br 1  8A           	txa
00001Cr 1  E9 00        	sbc     #$00
00001Er 1  A5 rr        	lda     sreg
000020r 1  E9 00        	sbc     #$00
000022r 1  A5 rr        	lda     sreg+1
000024r 1  E9 00        	sbc     #$00
000026r 1  B0 60        	bcs     L0003
000028r 1  A0 07        	ldy     #$07
00002Ar 1  20 rr rr     	jsr     ldeaxysp
00002Dr 1  20 rr rr     L001F:	jsr     steax0sp
000030r 1  20 rr rr     	jsr     ldeax0sp
000033r 1  C9 02        	cmp     #$02
000035r 1  8A           	txa
000036r 1  E9 00        	sbc     #$00
000038r 1  A5 rr        	lda     sreg
00003Ar 1  E9 00        	sbc     #$00
00003Cr 1  A5 rr        	lda     sreg+1
00003Er 1  E9 00        	sbc     #$00
000040r 1  90 2E        	bcc     L0004
000042r 1  20 rr rr     	jsr     ldeax0sp
000045r 1  A2 00        	ldx     #$00
000047r 1  29 01        	and     #$01
000049r 1  20 rr rr     	jsr     push0ax
00004Cr 1  8A           	txa
00004Dr 1  20 rr rr     	jsr     toseqeax
000050r 1  F0 09        	beq     L0011
000052r 1  20 rr rr     	jsr     ldeax0sp
000055r 1  20 rr rr     	jsr     shreax1
000058r 1  4C rr rr     	jmp     L001F
00005Br 1  20 rr rr     L0011:	jsr     ldeax0sp
00005Er 1  20 rr rr     	jsr     pusheax
000061r 1  A2 00        	ldx     #$00
000063r 1  A9 03        	lda     #$03
000065r 1  20 rr rr     	jsr     tosumul0ax
000068r 1  A0 01        	ldy     #$01
00006Ar 1  20 rr rr     	jsr     inceaxy
00006Dr 1  4C rr rr     	jmp     L001F
000070r 1  A0 07        L0004:	ldy     #$07
000072r 1  20 rr rr     	jsr     ldeaxysp
000075r 1  20 rr rr     	jsr     saveeax
000078r 1  A0 01        	ldy     #$01
00007Ar 1  20 rr rr     	jsr     inceaxy
00007Dr 1  A0 04        	ldy     #$04
00007Fr 1  20 rr rr     	jsr     steaxysp
000082r 1  20 rr rr     	jsr     resteax
000085r 1  4C rr rr     	jmp     L0002
000088r 1  A9 rr        L0003:	lda     #<(L0019)
00008Ar 1  A2 rr        	ldx     #>(L0019)
00008Cr 1  20 rr rr     	jsr     pushax
00008Fr 1  A0 09        	ldy     #$09
000091r 1  20 rr rr     	jsr     ldeaxysp
000094r 1  20 rr rr     	jsr     pusheax
000097r 1  A0 09        	ldy     #$09
000099r 1  20 rr rr     	jsr     ldeaxysp
00009Cr 1  20 rr rr     	jsr     pusheax
00009Fr 1  A0 0A        	ldy     #$0A
0000A1r 1  20 rr rr     	jsr     _cprintf
0000A4r 1  A0 05        	ldy     #$05
0000A6r 1  B1 rr        	lda     (sp),y
0000A8r 1  AA           	tax
0000A9r 1  88           	dey
0000AAr 1  B1 rr        	lda     (sp),y
0000ACr 1  4C rr rr     	jmp     incsp8
0000AFr 1               
0000AFr 1               .endproc
0000AFr 1               
0000AFr 1               
