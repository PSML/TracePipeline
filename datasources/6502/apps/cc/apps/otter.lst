ca65 V2.14.0
Main file   : otter.s
Current file: otter.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.14.0
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.14.0"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.export		_nodes
000000r 1               	.export		_potential
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"BSS"
000000r 1               
000000r 1               _nodes:
000000r 1  00 00 00 00  	.res	6672,$00
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
001A10r 1               
001A10r 1               ; ---------------------------------------------------------------
001A10r 1               ; long __near__ potential (long)
001A10r 1               ; ---------------------------------------------------------------
001A10r 1               
001A10r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_potential: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     decsp4
000003r 1  A0 00        	ldy     #$00
000005r 1  98           	tya
000006r 1  91 rr        	sta     (sp),y
000008r 1  C8           	iny
000009r 1  91 rr        	sta     (sp),y
00000Br 1  C8           	iny
00000Cr 1  91 rr        	sta     (sp),y
00000Er 1  C8           	iny
00000Fr 1  91 rr        	sta     (sp),y
000011r 1  20 rr rr     L0003:	jsr     ldeax0sp
000014r 1  20 rr rr     	jsr     pusheax
000017r 1  A2 00        	ldx     #$00
000019r 1  86 rr        	stx     sreg
00001Br 1  86 rr        	stx     sreg+1
00001Dr 1  A9 0D        	lda     #$0D
00001Fr 1  20 rr rr     	jsr     toslteax
000022r 1  F0 14        	beq     L0004
000024r 1  20 rr rr     	jsr     ldeax0sp
000027r 1  20 rr rr     	jsr     saveeax
00002Ar 1  A0 01        	ldy     #$01
00002Cr 1  20 rr rr     	jsr     inceaxy
00002Fr 1  20 rr rr     	jsr     steax0sp
000032r 1  20 rr rr     	jsr     resteax
000035r 1  4C rr rr     	jmp     L0003
000038r 1  20 rr rr     L0004:	jsr     ldeax0sp
00003Br 1  4C rr rr     	jmp     incsp8
00003Er 1               
00003Er 1               .endproc
00003Er 1               
00003Er 1               ; ---------------------------------------------------------------
00003Er 1               ; long __near__ main (void)
00003Er 1               ; ---------------------------------------------------------------
00003Er 1               
00003Er 1               .segment	"CODE"
00003Er 1               
00003Er 1               .proc	_main: near
00003Er 1               
00003Er 1               .segment	"CODE"
00003Er 1               
00003Er 1  A0 0A        	ldy     #$0A
000040r 1  20 rr rr     	jsr     subysp
000043r 1  A0 06        	ldy     #$06
000045r 1  A9 00        	lda     #$00
000047r 1  91 rr        	sta     (sp),y
000049r 1  C8           	iny
00004Ar 1  91 rr        	sta     (sp),y
00004Cr 1  C8           	iny
00004Dr 1  91 rr        	sta     (sp),y
00004Fr 1  C8           	iny
000050r 1  91 rr        	sta     (sp),y
000052r 1  A0 09        L000D:	ldy     #$09
000054r 1  20 rr rr     	jsr     ldeaxysp
000057r 1  20 rr rr     	jsr     pusheax
00005Ar 1  A2 04        	ldx     #$04
00005Cr 1  A9 00        	lda     #$00
00005Er 1  85 rr        	sta     sreg
000060r 1  85 rr        	sta     sreg+1
000062r 1  A9 57        	lda     #$57
000064r 1  20 rr rr     	jsr     toslteax
000067r 1  F0 65        	beq     L000E
000069r 1  A0 09        	ldy     #$09
00006Br 1  20 rr rr     	jsr     ldeaxysp
00006Er 1  20 rr rr     	jsr     mulax6
000071r 1  18           	clc
000072r 1  69 rr        	adc     #<(_nodes)
000074r 1  A8           	tay
000075r 1  8A           	txa
000076r 1  69 rr        	adc     #>(_nodes)
000078r 1  AA           	tax
000079r 1  98           	tya
00007Ar 1  20 rr rr     	jsr     pushax
00007Dr 1  A0 0B        	ldy     #$0B
00007Fr 1  20 rr rr     	jsr     ldeaxysp
000082r 1  A0 00        	ldy     #$00
000084r 1  20 rr rr     	jsr     steaxspidx
000087r 1  A0 09        	ldy     #$09
000089r 1  20 rr rr     	jsr     ldeaxysp
00008Cr 1  20 rr rr     	jsr     mulax6
00008Fr 1  18           	clc
000090r 1  69 rr        	adc     #<(_nodes)
000092r 1  A8           	tay
000093r 1  8A           	txa
000094r 1  69 rr        	adc     #>(_nodes)
000096r 1  AA           	tax
000097r 1  98           	tya
000098r 1  20 rr rr     	jsr     pushax
00009Br 1  A0 0B        	ldy     #$0B
00009Dr 1  20 rr rr     	jsr     ldeaxysp
0000A0r 1  A0 01        	ldy     #$01
0000A2r 1  20 rr rr     	jsr     inceaxy
0000A5r 1  20 rr rr     	jsr     mulax6
0000A8r 1  18           	clc
0000A9r 1  69 rr        	adc     #<(_nodes)
0000ABr 1  A8           	tay
0000ACr 1  8A           	txa
0000ADr 1  69 rr        	adc     #>(_nodes)
0000AFr 1  AA           	tax
0000B0r 1  98           	tya
0000B1r 1  A0 04        	ldy     #$04
0000B3r 1  20 rr rr     	jsr     staxspidx
0000B6r 1  A0 09        	ldy     #$09
0000B8r 1  20 rr rr     	jsr     ldeaxysp
0000BBr 1  20 rr rr     	jsr     saveeax
0000BEr 1  A0 01        	ldy     #$01
0000C0r 1  20 rr rr     	jsr     inceaxy
0000C3r 1  A0 06        	ldy     #$06
0000C5r 1  20 rr rr     	jsr     steaxysp
0000C8r 1  20 rr rr     	jsr     resteax
0000CBr 1  4C rr rr     	jmp     L000D
0000CEr 1  A0 09        L000E:	ldy     #$09
0000D0r 1  20 rr rr     	jsr     ldeaxysp
0000D3r 1  8D rr rr     	sta     _nodes+6666
0000D6r 1  8E rr rr     	stx     _nodes+6666+1
0000D9r 1  A4 rr        	ldy     sreg
0000DBr 1  8C rr rr     	sty     _nodes+6666+2
0000DEr 1  A4 rr        	ldy     sreg+1
0000E0r 1  8C rr rr     	sty     _nodes+6666+3
0000E3r 1  A9 00        	lda     #$00
0000E5r 1  8D rr rr     	sta     _nodes+6670
0000E8r 1  8D rr rr     	sta     _nodes+6670+1
0000EBr 1  A9 rr        	lda     #<(_nodes)
0000EDr 1  A2 rr        	ldx     #>(_nodes)
0000EFr 1  20 rr rr     L0033:	jsr     stax0sp
0000F2r 1  A0 01        	ldy     #$01
0000F4r 1  B1 rr        	lda     (sp),y
0000F6r 1  88           	dey
0000F7r 1  11 rr        	ora     (sp),y
0000F9r 1  F0 35        	beq     L0023
0000FBr 1  C8           	iny
0000FCr 1  B1 rr        	lda     (sp),y
0000FEr 1  AA           	tax
0000FFr 1  88           	dey
000100r 1  B1 rr        	lda     (sp),y
000102r 1  20 rr rr     	jsr     ldeaxi
000105r 1  20 rr rr     	jsr     pusheax
000108r 1  20 rr rr     	jsr     _potential
00010Br 1  A0 02        	ldy     #$02
00010Dr 1  20 rr rr     	jsr     steaxysp
000110r 1  A0 05        	ldy     #$05
000112r 1  20 rr rr     	jsr     ldeaxysp
000115r 1  A5 rr        	lda     sreg+1
000117r 1  0A           	asl     a
000118r 1  B0 16        	bcs     L0023
00011Ar 1  A0 01        	ldy     #$01
00011Cr 1  B1 rr        	lda     (sp),y
00011Er 1  85 rr        	sta     ptr1+1
000120r 1  88           	dey
000121r 1  B1 rr        	lda     (sp),y
000123r 1  85 rr        	sta     ptr1
000125r 1  A0 05        	ldy     #$05
000127r 1  B1 rr        	lda     (ptr1),y
000129r 1  AA           	tax
00012Ar 1  88           	dey
00012Br 1  B1 rr        	lda     (ptr1),y
00012Dr 1  4C rr rr     	jmp     L0033
000130r 1  A0 05        L0023:	ldy     #$05
000132r 1  20 rr rr     	jsr     ldeaxysp
000135r 1  A0 0A        	ldy     #$0A
000137r 1  4C rr rr     	jmp     addysp
00013Ar 1               
00013Ar 1               .endproc
00013Ar 1               
00013Ar 1               
